package sa.com.stc.customerverification.web.dto.avro; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class customerEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1270432686222701252L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"customerEvent\",\"fields\":[{\"name\":\"eventType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Type of Event for example createCustomer, updateCustomer\",\"default\":null},{\"name\":\"customerData\",\"type\":{\"type\":\"record\",\"name\":\"customer\",\"fields\":[{\"name\":\"id_number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id_type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"id_effective_dt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"id_expiry_dt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"first_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"last_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"middle_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customer_dob\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"primary_contact\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<customerEvent> ENCODER =
      new BinaryMessageEncoder<customerEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<customerEvent> DECODER =
      new BinaryMessageDecoder<customerEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<customerEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<customerEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<customerEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<customerEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this customerEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a customerEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a customerEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static customerEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of Event for example createCustomer, updateCustomer */
   private String eventType;
   private customer customerData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public customerEvent() {}

  /**
   * All-args constructor.
   * @param eventType Type of Event for example createCustomer, updateCustomer
   * @param customerData The new value for customerData
   */
  public customerEvent(String eventType, customer customerData) {
    this.eventType = eventType;
    this.customerData = customerData;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return customerData;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: eventType = value$ != null ? value$.toString() : null; break;
    case 1: customerData = (customer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return Type of Event for example createCustomer, updateCustomer
   */
  public String getEventType() {
    return eventType;
  }



  /**
   * Gets the value of the 'customerData' field.
   * @return The value of the 'customerData' field.
   */
  public customer getCustomerData() {
    return customerData;
  }



  /**
   * Creates a new customerEvent RecordBuilder.
   * @return A new customerEvent RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new customerEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new customerEvent RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new customerEvent RecordBuilder by copying an existing customerEvent instance.
   * @param other The existing instance to copy.
   * @return A new customerEvent RecordBuilder
   */
  public static Builder newBuilder(customerEvent other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for customerEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<customerEvent>
    implements org.apache.avro.data.RecordBuilder<customerEvent> {

    /** Type of Event for example createCustomer, updateCustomer */
    private String eventType;
    private customer customerData;
    private customer.Builder customerDataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerData)) {
        this.customerData = data().deepCopy(fields()[1].schema(), other.customerData);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasCustomerDataBuilder()) {
        this.customerDataBuilder = customer.newBuilder(other.getCustomerDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing customerEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(customerEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerData)) {
        this.customerData = data().deepCopy(fields()[1].schema(), other.customerData);
        fieldSetFlags()[1] = true;
      }
      this.customerDataBuilder = null;
    }

    /**
      * Gets the value of the 'eventType' field.
      * Type of Event for example createCustomer, updateCustomer
      * @return The value.
      */
    public String getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * Type of Event for example createCustomer, updateCustomer
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public Builder setEventType(String value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * Type of Event for example createCustomer, updateCustomer
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * Type of Event for example createCustomer, updateCustomer
      * @return This builder.
      */
    public Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerData' field.
      * @return The value.
      */
    public customer getCustomerData() {
      return customerData;
    }


    /**
      * Sets the value of the 'customerData' field.
      * @param value The value of 'customerData'.
      * @return This builder.
      */
    public Builder setCustomerData(customer value) {
      validate(fields()[1], value);
      this.customerDataBuilder = null;
      this.customerData = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerData' field has been set.
      * @return True if the 'customerData' field has been set, false otherwise.
      */
    public boolean hasCustomerData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'customerData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public customer.Builder getCustomerDataBuilder() {
      if (customerDataBuilder == null) {
        if (hasCustomerData()) {
          setCustomerDataBuilder(customer.newBuilder(customerData));
        } else {
          setCustomerDataBuilder(customer.newBuilder());
        }
      }
      return customerDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'customerData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setCustomerDataBuilder(customer.Builder value) {
      clearCustomerData();
      customerDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customerData' field has an active Builder instance
     * @return True if the 'customerData' field has an active Builder instance
     */
    public boolean hasCustomerDataBuilder() {
      return customerDataBuilder != null;
    }

    /**
      * Clears the value of the 'customerData' field.
      * @return This builder.
      */
    public Builder clearCustomerData() {
      customerData = null;
      customerDataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public customerEvent build() {
      try {
        customerEvent record = new customerEvent();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (String) defaultValue(fields()[0]);
        if (customerDataBuilder != null) {
          try {
            record.customerData = this.customerDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("customerData"));
            throw e;
          }
        } else {
          record.customerData = fieldSetFlags()[1] ? this.customerData : (customer) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<customerEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<customerEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<customerEvent>
    READER$ = (org.apache.avro.io.DatumReader<customerEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.eventType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventType);
    }

    this.customerData.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.eventType = null;
      } else {
        this.eventType = in.readString();
      }

      if (this.customerData == null) {
        this.customerData = new customer();
      }
      this.customerData.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventType = null;
          } else {
            this.eventType = in.readString();
          }
          break;

        case 1:
          if (this.customerData == null) {
            this.customerData = new customer();
          }
          this.customerData.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










