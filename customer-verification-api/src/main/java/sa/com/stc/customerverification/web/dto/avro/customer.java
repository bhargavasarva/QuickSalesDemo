package sa.com.stc.customerverification.web.dto.avro; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9134791229634465796L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"customer\",\"fields\":[{\"name\":\"id_number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id_type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"id_effective_dt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"id_expiry_dt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"first_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"last_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"middle_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customer_dob\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"primary_contact\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<customer> ENCODER =
      new BinaryMessageEncoder<customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<customer> DECODER =
      new BinaryMessageDecoder<customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String id_number;
   private String id_type;
   private String id_effective_dt;
   private String id_expiry_dt;
   private String first_name;
   private String last_name;
   private String middle_name;
   private String customer_dob;
   private String primary_contact;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public customer() {}

  /**
   * All-args constructor.
   * @param id_number The new value for id_number
   * @param id_type The new value for id_type
   * @param id_effective_dt The new value for id_effective_dt
   * @param id_expiry_dt The new value for id_expiry_dt
   * @param first_name The new value for first_name
   * @param last_name The new value for last_name
   * @param middle_name The new value for middle_name
   * @param customer_dob The new value for customer_dob
   * @param primary_contact The new value for primary_contact
   */
  public customer(String id_number, String id_type, String id_effective_dt, String id_expiry_dt, String first_name, String last_name, String middle_name, String customer_dob, String primary_contact) {
    this.id_number = id_number;
    this.id_type = id_type;
    this.id_effective_dt = id_effective_dt;
    this.id_expiry_dt = id_expiry_dt;
    this.first_name = first_name;
    this.last_name = last_name;
    this.middle_name = middle_name;
    this.customer_dob = customer_dob;
    this.primary_contact = primary_contact;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id_number;
    case 1: return id_type;
    case 2: return id_effective_dt;
    case 3: return id_expiry_dt;
    case 4: return first_name;
    case 5: return last_name;
    case 6: return middle_name;
    case 7: return customer_dob;
    case 8: return primary_contact;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id_number = value$ != null ? value$.toString() : null; break;
    case 1: id_type = value$ != null ? value$.toString() : null; break;
    case 2: id_effective_dt = value$ != null ? value$.toString() : null; break;
    case 3: id_expiry_dt = value$ != null ? value$.toString() : null; break;
    case 4: first_name = value$ != null ? value$.toString() : null; break;
    case 5: last_name = value$ != null ? value$.toString() : null; break;
    case 6: middle_name = value$ != null ? value$.toString() : null; break;
    case 7: customer_dob = value$ != null ? value$.toString() : null; break;
    case 8: primary_contact = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id_number' field.
   * @return The value of the 'id_number' field.
   */
  public String getIdNumber() {
    return id_number;
  }



  /**
   * Gets the value of the 'id_type' field.
   * @return The value of the 'id_type' field.
   */
  public String getIdType() {
    return id_type;
  }



  /**
   * Gets the value of the 'id_effective_dt' field.
   * @return The value of the 'id_effective_dt' field.
   */
  public String getIdEffectiveDt() {
    return id_effective_dt;
  }



  /**
   * Gets the value of the 'id_expiry_dt' field.
   * @return The value of the 'id_expiry_dt' field.
   */
  public String getIdExpiryDt() {
    return id_expiry_dt;
  }



  /**
   * Gets the value of the 'first_name' field.
   * @return The value of the 'first_name' field.
   */
  public String getFirstName() {
    return first_name;
  }



  /**
   * Gets the value of the 'last_name' field.
   * @return The value of the 'last_name' field.
   */
  public String getLastName() {
    return last_name;
  }



  /**
   * Gets the value of the 'middle_name' field.
   * @return The value of the 'middle_name' field.
   */
  public String getMiddleName() {
    return middle_name;
  }



  /**
   * Gets the value of the 'customer_dob' field.
   * @return The value of the 'customer_dob' field.
   */
  public String getCustomerDob() {
    return customer_dob;
  }



  /**
   * Gets the value of the 'primary_contact' field.
   * @return The value of the 'primary_contact' field.
   */
  public String getPrimaryContact() {
    return primary_contact;
  }



  /**
   * Creates a new customer RecordBuilder.
   * @return A new customer RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new customer RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new customer RecordBuilder by copying an existing customer instance.
   * @param other The existing instance to copy.
   * @return A new customer RecordBuilder
   */
  public static Builder newBuilder(customer other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<customer>
    implements org.apache.avro.data.RecordBuilder<customer> {

    private String id_number;
    private String id_type;
    private String id_effective_dt;
    private String id_expiry_dt;
    private String first_name;
    private String last_name;
    private String middle_name;
    private String customer_dob;
    private String primary_contact;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id_number)) {
        this.id_number = data().deepCopy(fields()[0].schema(), other.id_number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id_type)) {
        this.id_type = data().deepCopy(fields()[1].schema(), other.id_type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id_effective_dt)) {
        this.id_effective_dt = data().deepCopy(fields()[2].schema(), other.id_effective_dt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.id_expiry_dt)) {
        this.id_expiry_dt = data().deepCopy(fields()[3].schema(), other.id_expiry_dt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.first_name)) {
        this.first_name = data().deepCopy(fields()[4].schema(), other.first_name);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.last_name)) {
        this.last_name = data().deepCopy(fields()[5].schema(), other.last_name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.middle_name)) {
        this.middle_name = data().deepCopy(fields()[6].schema(), other.middle_name);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.customer_dob)) {
        this.customer_dob = data().deepCopy(fields()[7].schema(), other.customer_dob);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.primary_contact)) {
        this.primary_contact = data().deepCopy(fields()[8].schema(), other.primary_contact);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing customer instance
     * @param other The existing instance to copy.
     */
    private Builder(customer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id_number)) {
        this.id_number = data().deepCopy(fields()[0].schema(), other.id_number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id_type)) {
        this.id_type = data().deepCopy(fields()[1].schema(), other.id_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id_effective_dt)) {
        this.id_effective_dt = data().deepCopy(fields()[2].schema(), other.id_effective_dt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id_expiry_dt)) {
        this.id_expiry_dt = data().deepCopy(fields()[3].schema(), other.id_expiry_dt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.first_name)) {
        this.first_name = data().deepCopy(fields()[4].schema(), other.first_name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.last_name)) {
        this.last_name = data().deepCopy(fields()[5].schema(), other.last_name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.middle_name)) {
        this.middle_name = data().deepCopy(fields()[6].schema(), other.middle_name);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.customer_dob)) {
        this.customer_dob = data().deepCopy(fields()[7].schema(), other.customer_dob);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.primary_contact)) {
        this.primary_contact = data().deepCopy(fields()[8].schema(), other.primary_contact);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id_number' field.
      * @return The value.
      */
    public String getIdNumber() {
      return id_number;
    }


    /**
      * Sets the value of the 'id_number' field.
      * @param value The value of 'id_number'.
      * @return This builder.
      */
    public Builder setIdNumber(String value) {
      validate(fields()[0], value);
      this.id_number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id_number' field has been set.
      * @return True if the 'id_number' field has been set, false otherwise.
      */
    public boolean hasIdNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id_number' field.
      * @return This builder.
      */
    public Builder clearIdNumber() {
      id_number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id_type' field.
      * @return The value.
      */
    public String getIdType() {
      return id_type;
    }


    /**
      * Sets the value of the 'id_type' field.
      * @param value The value of 'id_type'.
      * @return This builder.
      */
    public Builder setIdType(String value) {
      validate(fields()[1], value);
      this.id_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id_type' field has been set.
      * @return True if the 'id_type' field has been set, false otherwise.
      */
    public boolean hasIdType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id_type' field.
      * @return This builder.
      */
    public Builder clearIdType() {
      id_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id_effective_dt' field.
      * @return The value.
      */
    public String getIdEffectiveDt() {
      return id_effective_dt;
    }


    /**
      * Sets the value of the 'id_effective_dt' field.
      * @param value The value of 'id_effective_dt'.
      * @return This builder.
      */
    public Builder setIdEffectiveDt(String value) {
      validate(fields()[2], value);
      this.id_effective_dt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id_effective_dt' field has been set.
      * @return True if the 'id_effective_dt' field has been set, false otherwise.
      */
    public boolean hasIdEffectiveDt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id_effective_dt' field.
      * @return This builder.
      */
    public Builder clearIdEffectiveDt() {
      id_effective_dt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id_expiry_dt' field.
      * @return The value.
      */
    public String getIdExpiryDt() {
      return id_expiry_dt;
    }


    /**
      * Sets the value of the 'id_expiry_dt' field.
      * @param value The value of 'id_expiry_dt'.
      * @return This builder.
      */
    public Builder setIdExpiryDt(String value) {
      validate(fields()[3], value);
      this.id_expiry_dt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id_expiry_dt' field has been set.
      * @return True if the 'id_expiry_dt' field has been set, false otherwise.
      */
    public boolean hasIdExpiryDt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id_expiry_dt' field.
      * @return This builder.
      */
    public Builder clearIdExpiryDt() {
      id_expiry_dt = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_name' field.
      * @return The value.
      */
    public String getFirstName() {
      return first_name;
    }


    /**
      * Sets the value of the 'first_name' field.
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public Builder setFirstName(String value) {
      validate(fields()[4], value);
      this.first_name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'first_name' field.
      * @return This builder.
      */
    public Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * @return The value.
      */
    public String getLastName() {
      return last_name;
    }


    /**
      * Sets the value of the 'last_name' field.
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public Builder setLastName(String value) {
      validate(fields()[5], value);
      this.last_name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'last_name' field.
      * @return This builder.
      */
    public Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'middle_name' field.
      * @return The value.
      */
    public String getMiddleName() {
      return middle_name;
    }


    /**
      * Sets the value of the 'middle_name' field.
      * @param value The value of 'middle_name'.
      * @return This builder.
      */
    public Builder setMiddleName(String value) {
      validate(fields()[6], value);
      this.middle_name = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'middle_name' field has been set.
      * @return True if the 'middle_name' field has been set, false otherwise.
      */
    public boolean hasMiddleName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'middle_name' field.
      * @return This builder.
      */
    public Builder clearMiddleName() {
      middle_name = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_dob' field.
      * @return The value.
      */
    public String getCustomerDob() {
      return customer_dob;
    }


    /**
      * Sets the value of the 'customer_dob' field.
      * @param value The value of 'customer_dob'.
      * @return This builder.
      */
    public Builder setCustomerDob(String value) {
      validate(fields()[7], value);
      this.customer_dob = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_dob' field has been set.
      * @return True if the 'customer_dob' field has been set, false otherwise.
      */
    public boolean hasCustomerDob() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'customer_dob' field.
      * @return This builder.
      */
    public Builder clearCustomerDob() {
      customer_dob = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'primary_contact' field.
      * @return The value.
      */
    public String getPrimaryContact() {
      return primary_contact;
    }


    /**
      * Sets the value of the 'primary_contact' field.
      * @param value The value of 'primary_contact'.
      * @return This builder.
      */
    public Builder setPrimaryContact(String value) {
      validate(fields()[8], value);
      this.primary_contact = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'primary_contact' field has been set.
      * @return True if the 'primary_contact' field has been set, false otherwise.
      */
    public boolean hasPrimaryContact() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'primary_contact' field.
      * @return This builder.
      */
    public Builder clearPrimaryContact() {
      primary_contact = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public customer build() {
      try {
        customer record = new customer();
        record.id_number = fieldSetFlags()[0] ? this.id_number : (String) defaultValue(fields()[0]);
        record.id_type = fieldSetFlags()[1] ? this.id_type : (String) defaultValue(fields()[1]);
        record.id_effective_dt = fieldSetFlags()[2] ? this.id_effective_dt : (String) defaultValue(fields()[2]);
        record.id_expiry_dt = fieldSetFlags()[3] ? this.id_expiry_dt : (String) defaultValue(fields()[3]);
        record.first_name = fieldSetFlags()[4] ? this.first_name : (String) defaultValue(fields()[4]);
        record.last_name = fieldSetFlags()[5] ? this.last_name : (String) defaultValue(fields()[5]);
        record.middle_name = fieldSetFlags()[6] ? this.middle_name : (String) defaultValue(fields()[6]);
        record.customer_dob = fieldSetFlags()[7] ? this.customer_dob : (String) defaultValue(fields()[7]);
        record.primary_contact = fieldSetFlags()[8] ? this.primary_contact : (String) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<customer>
    READER$ = (org.apache.avro.io.DatumReader<customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id_number);

    if (this.id_type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id_type);
    }

    if (this.id_effective_dt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id_effective_dt);
    }

    if (this.id_expiry_dt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id_expiry_dt);
    }

    if (this.first_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.first_name);
    }

    if (this.last_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.last_name);
    }

    if (this.middle_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.middle_name);
    }

    if (this.customer_dob == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.customer_dob);
    }

    if (this.primary_contact == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.primary_contact);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id_number = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.id_type = null;
      } else {
        this.id_type = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id_effective_dt = null;
      } else {
        this.id_effective_dt = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id_expiry_dt = null;
      } else {
        this.id_expiry_dt = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.first_name = null;
      } else {
        this.first_name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.last_name = null;
      } else {
        this.last_name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.middle_name = null;
      } else {
        this.middle_name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.customer_dob = null;
      } else {
        this.customer_dob = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.primary_contact = null;
      } else {
        this.primary_contact = in.readString();
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id_number = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_type = null;
          } else {
            this.id_type = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_effective_dt = null;
          } else {
            this.id_effective_dt = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_expiry_dt = null;
          } else {
            this.id_expiry_dt = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.first_name = null;
          } else {
            this.first_name = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.last_name = null;
          } else {
            this.last_name = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.middle_name = null;
          } else {
            this.middle_name = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.customer_dob = null;
          } else {
            this.customer_dob = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.primary_contact = null;
          } else {
            this.primary_contact = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










